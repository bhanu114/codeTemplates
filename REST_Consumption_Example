public class ValidateAddressesREST {
    public class Address {
        public String id;
        public String line1;
        public String line2;
        public String city;
        public String state;
        public String country;
        public String zipCode;
    }
    
    public class Result {
        public Boolean isValid;
        public List<resultDifference> differences;
        public Address testAddress;
        public Address validAddress;
    }
    
    public class ResultDifference {
        public String expecting;
        public String fieldName;
        public String received;
    }
    
    public List<Result> ValidateAddresses(List<ValidateAddressesREST.Address> listAddress) {
        List<Result> output = null;
        HTTP http = new HTTP(); 
        String endpoint = 'callout:HerokuWebService/rest/validateMultipleAddress';

        //TODOs: 
        // 1. Construct an HTTPRequest object using the default constructor and assign it to a variable 
        //    called req of type HTTPRequest.
		HTTPRequest req = new HTTPRequest();
		
        // 2. Using the appropriate setter method, set the endpoint on the request to the value of the
        //    variable "endpoint"
        req.setEndpoint(endpoint);
        // 3. Using the appropriate setter method, set the HTTP method of the request to POST.
        req.setMethod('POST');
        // 4. Using the setHeader method on the request, add the key-value pair "Accept", "application/json".
       	req.setHeader('Accept', 'application/json');
        // 5. Using the setHeader method on the request, add the key-value pair "Content-Type","application/json".
        req.setHeader('Content-Type', 'application/json');
        // 6. Using the appropriate setter method, set the body on the request to the result of using the static
        //    serialize method of the Apex JSON class on the "listAddress" variable.
        req.setBody(JSON.serialize(listAddress));
        // 7. Add a call to the System debug method to display the request body.
        System.debug('Request Body = ' + req.getBody());
        // 8. Invoke the send method of the HTTP class on the variable "http" passing in the request object
        //    and store the result in an HTTPResponse object called "resp". 
        HttpResponse resp = http.send(req);

        if (resp.getStatusCode() == 200) { // 200 is the "good" status code
            System.debug('Response: ' + resp.getBody());
            output = (List<Result>) JSON.deserialize(resp.getBody(), List<Result>.class);
        } else {
            // Handle HTTP Error
            Error_Log__c log = new Error_Log__c();
            log.trace__c = '';
            log.trace__c += 'Error: ' + resp.getStatusCode() + ' while connecting to: ' + endpoint + '\r\n';
            log.trace__c += resp.getStatus() + '\r\n';
            log.trace__c += resp.getBody() + '\r\n';
            insert log;
        }
        return output;
    }
}
//********************************* USSAGE CLASS ***************************

public class ValidateAddresses {
    public static Boolean AsyncValidationFlag = false;
    
    @future(callout=true) 
    public static void validateAddressSOAP(Set<ID> ids) {
        try {
            // Build list of addresses to validate
            Map<ID, Candidate__c> mapCands = findCandidates(ids);
            List<ValidateAddressesSOAP.addressSOAP> listAddress = new List<ValidateAddressesSOAP.addressSOAP>();
            for (Candidate__c cand : mapCands.values()) {
                ValidateAddressesSOAP.addressSOAP address = new ValidateAddressesSOAP.addressSOAP();
                address.id = cand.id;
                address.line1 = cand.Street_Address_1__c;
                address.line2 = cand.Street_Address_2__c;
                address.city = cand.city__c;
                address.state = cand.state_Province__c;
                address.country = cand.country__c;
                address.zipCode = cand.zip_postal_code__c;
                listAddress.add(address);
            }
                        
            // Make callout
            // TODO Exercise 10-2:: Construct an instance of the ValidateAddressesSOAP.ValidateAddressesPort class
            //      and assign it to a variable called "soapPort" of type ValidateAddressesSOAP.ValidateAddressesPort.
            ValidateAddressesSOAP.ValidateAddressesPort soapPort = new ValidateAddressesSOAP.ValidateAddressesPort();
            // TODO Exercise 10-2: Using the "soapPort" variable, call the ValidateAddresses method, 
            //      passing it the variable "listAddress", and assign the resulting list to a variable called "listResult", 
            //      which should be a list of ValidateAddressesSOAP.validationResultSOAP objects.
            List<ValidateAddressesSOAP.validationResultSOAP> listResult = soapPort.ValidateAddresses(listAddress);

            // Verify results
            for (ValidateAddressesSOAP.validationResultSOAP result : listResult) {
                Candidate__c cand = mapCands.get(result.testAddress.id);
                if (result.isValid) {
                    cand.Valid_US_Address__c = true;
                    cand.Address_Error__c = null;
                } else {
                    cand.Valid_US_Address__c = false;
                    cand.Address_Error__c = 'Invalid Address';                 
                }
            }
            
            // Update Candidate
            AsyncValidationFlag = true;
            update mapCands.values();
        } catch (Exception ex) {
            // Handle Exception
            System.debug('ERROR: '+ ex);
            Error_Log__c log = new Error_Log__c();
            log.trace__c = ex.getCause() + '\n' + ex.getMessage();
            insert log;        
        }
    }

    //TODO Exercise 10-3: Use the @future annotation to specify that the following method is a web service callout
   @future(callout=true)
    public static void validateAddressREST(Set<ID> ids) {
        try {
            // Build list of addresses to validate
            Map<ID, Candidate__c> mapCands = findCandidates(ids);
            List<ValidateAddressesREST.Address> listAddress = new List<ValidateAddressesREST.Address>();
            for (Candidate__c cand : mapCands.values()) {
                ValidateAddressesREST.Address address = new ValidateAddressesREST.Address();
                address.id = cand.id;
                address.line1 = cand.Street_Address_1__c;
                address.line2 = cand.Street_Address_2__c;
                address.city = cand.city__c;
                address.state = cand.state_Province__c;
                address.country = cand.country__c;
                address.zipCode = cand.zip_postal_code__c;
                listAddress.add(address);
            }
                        
            // Make callout
            //TODO Exercise 10-3: Construct an instance of the ValidateAddressesREST class using the default constructor
            //      and assign it to a variable called "restPort" of type ValidateAddressesREST.
            ValidateAddressesREST restPort = new ValidateAddressesREST();
            
            //TODO Exercise 10-3: Using the "restPort" variable, call the ValidateAddresses method, passing it the variable "listAddress",
            //      and assign the resulting list to a variable called "listResult", which should be a list of
            //      ValidateAddressesREST.Result objects. 
           List<ValidateAddressesREST.Result> listResult = restPort.ValidateAddresses(listAddress);

            // Verify results
            for (ValidateAddressesREST.Result result : listResult) {
                Candidate__c cand = mapCands.get(result.testAddress.id);
                if (result.isValid) {
                    cand.Valid_US_Address__c = true;
                    cand.Address_Error__c = null;
                } else {
                    cand.Valid_US_Address__c = false;
                    cand.Address_Error__c = 'Invalid Address';                 
                }
            }
            
            // Update Candidate
            AsyncValidationFlag = true;
            update mapCands.values();
        } catch (Exception ex) {
            // Handle Exception
            System.debug('ERROR: '+ ex);
            Error_Log__c log = new Error_Log__c();
            log.trace__c = ex.getCause() + '\n' + ex.getMessage();
            insert log;        
        }
    }
    
    private static Map<ID, Candidate__c> findCandidates(Set<ID> ids) {
        Map<ID, Candidate__c> output;
        output = new Map<ID, Candidate__c>([SELECT ID, Street_Address_1__c, Street_Address_2__c, city__c,
                                                state_Province__c, country__c, zip_postal_code__c
                                            FROM candidate__c
                                            WHERE id in :ids]);
        return output;
    }
}
